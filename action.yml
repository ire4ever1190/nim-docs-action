name: "Nim documentation generator"
description: "Automatically builds documentation with a few extra niceties that I like"
author: "Jake Leahy"
branding:
  icon: book
  color: yellow
inputs:
  main-file:
    description: "Main Nim file which to build documentation with (relative to root of `project-dir`)"
    required: true

  out-dir:
    description: "Where to put the files (Relative to `project-dir`)"
    required: true
    default: "site/"

  project-dir:
    description: "Folder containing the .nimble file"
    required: true
    default: "./"

  build-index:
    description: "Whether to build indexes first or not (Can be disabled if you don't use importdoc)"
    required: true
    default: 'true' # We don't get booleans?

  deploy:
    description: "Automatically deploy the site. Currently only supports Github pages"
    required: false
    default: "none"

  devel-branch:
    description: "Development branch to link to in the `edit` button. Defaults to the default branch in git"
    required: false
    default: ""

  extra-files:
    description: "Extra documentation files to render. Can either be markdown or Nim files"
    required: false
    default: ""

outputs:
  site-dir:
    description: "Path to built documentation"
    value: ${{ inputs.project-dir }}/${{ inputs.out-dir }}

runs:
  using: composite
  steps:
    # Convert all the nimble variables into ENV variables for easy access
    - name: "Convert nimble files to ENV variables"
      shell: bash
      working-directory: ${{ inputs.project-dir }}
      run: |
        nimble dump | sed -E "s/(\w+): \"(.*)\"/nimble_\\1=\\2/" >> $GITHUB_ENV

    # To remove the src/ prefix in the pages we add a dummy
    # .nimble file so that Nim thinks the files are root level
    - name: "Create dummy nimble file"
      shell: bash
      working-directory: ${{ inputs.project-dir }}
      run: touch "$nimble_srcDir/dummy.nimble"

    - name: "Try to checkout branch that matches version"
      shell: bash
      id: get-version
      working-directory: ${{ inputs.project-dir }}
      run: |
        git fetch --tags
        # We need to hide grep errors when it doesn't match
        # https://stackoverflow.com/a/49627999/21247938
        found_ver=$(git tag -l | { grep -E -m 1 "v?$nimble_version" || test $? = 1; })
        echo "pkg_ver=$found_ver" >> $GITHUB_OUTPUT
        if [ ! -z "$found_ver" ]
        then
          git checkout "$found_ver"
        fi

    # To support `importdoc` we need to first build the
    # indexes
    - name: "Build index"
      shell: bash
      working-directory: ${{ inputs.project-dir }}
      if: ${{ inputs.build-index == 'true' }}
      run: >
        nimble -y doc
        --project
        --outdir="${{ inputs.out-dir }}"
        --docCmd:skip
        --index:only
        ${{ inputs.main-file }}

    - name: "Generate extra files"
      shell: bash
      working-directory: ${{ inputs.project-dir }}
      run: |
        # Go through each file and generate it
        for file in $(ls ${{ inputs. extra-files }});
        do
          # Change command depending on what the file is
          # TODO: Support RST
          case "$file" in
            "*.md")
              newFile=${file/%md/html}
              cmd=nim md2html ;;
            "*.nim")
              newFile=${file/%nim/html}
              cmd=nimble -y doc ;;
            *)
              echo "Don't know how to render this file..."
              exit 1;;
          esac
          indexFile="${{ inputs.out-dir }}/${newFile/%html/idx}"
          # Build the file
          $cmd --out="${{ inputs.out-dir }}/${newFile}" --index:on


          # We need to perform a few patches to the index file.
          # - Make the title be markupTitle so it gets rendered as a document in theindex.html
          # - Fix the file path so it goes into the right subfolder
          sed -E -i $indexFile \
            -e "s/nimTitle/markupTitle/" \
            -e "^(\S+\s)\S+/$1{newFile}/g"
        done

    - name: "Run doc generation"
      shell: bash
      working-directory: ${{ inputs.project-dir }}
      run: >
        nimble -y doc
        --project
        --outdir="${{ inputs.out-dir }}"
        --index:on
        --git.url:"$GITHUB_SERVER_URL/$GITHUB_REPOSITORY"
        --git.commit:"${{ steps.get-version.outputs.pkg_ver || github.sha }}"
        --git.devel:"${{ inputs.devel-branch || github.event.repository.default_branch }}"
        ${{ inputs.main-file }}

    # Adds a few extra KB overhead to store theindex.html twice, but
    # means there are no redirects or anything like that
    - name: "Copy index"
      shell: bash
      working-directory: ${{ inputs.project-dir }}
      run: cp "${{ inputs.out-dir }}/theindex.html" "${{ inputs.out-dir }}/index.html"

    #
    # Github pages deployment
    #

    - name: "Create artefact"
      if: ${{ inputs.deploy == 'pages' }}
      uses: actions/upload-pages-artifact@v1
      with:
        path: ${{ inputs.project-dir }}/${{ inputs.out-dir }}

    - name: "Deploy to pages"
      if: ${{ inputs.deploy == 'pages' }}
      uses: actions/deploy-pages@v1
